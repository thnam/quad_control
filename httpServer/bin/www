#!/usr/bin/env node

/**
 * Module dependencies.
 */

global.appRoot = require('app-root-path').toString();
const app = require(global.appRoot + '/app');
const httpLog = require(global.appRoot + '/loggers/httpLogger.js');
const debug = require('debug')('httpserver:server');
const http = require('http');

/**
 * Get port from environment and store in Express.
 */

const port = require("config").server.port;
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

// socket io for pushing periodic events
const io = require('socket.io')(server);
io.on('connection', function (socket) {
  httpLog.info("Client connected from: "  + socket.handshake.address);

  socket.emit('greeting', { hello: 'world' });

  setInterval(()=>{
    var date = new Date();
    dateStr = date.toDateString() + " - " + date.toLocaleTimeString();
    socket.emit('timeStamp', {timeStamp: dateStr});
  }, 1000);

  socket.on('my other event', function (data) {
    console.log(data);
  });
});
